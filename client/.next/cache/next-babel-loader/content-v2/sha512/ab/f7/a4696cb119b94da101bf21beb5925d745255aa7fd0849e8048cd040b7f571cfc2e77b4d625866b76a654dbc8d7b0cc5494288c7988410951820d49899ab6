{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/guillaumeesnault/Documents/Projects/portfolio/client/pages/_app.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport NextApp from \"next/app\";\nimport \"../styles/globals.css\";\nimport theme from \"../theme\";\nimport AppHead from \"~components/AppHead\";\nimport { appWithTranslation } from \"next-i18next\";\n\nconst App = ({\n  Component,\n  pageProps\n}) => {\n  const content = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AppHead, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChakraProvider, {\n      theme: theme,\n      children: /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n\n  return content;\n};\n\nApp.getInitialProps = async appContext => {\n  const appProps = await NextApp.getInitialProps(appContext);\n  return _objectSpread({}, appProps);\n};\n\nexport default appWithTranslation(App);","map":{"version":3,"sources":["/Users/guillaumeesnault/Documents/Projects/portfolio/client/pages/_app.tsx"],"names":["React","ChakraProvider","NextApp","theme","AppHead","appWithTranslation","App","Component","pageProps","content","getInitialProps","appContext","appProps"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,OAAP,MAAkC,UAAlC;AACA,OAAO,uBAAP;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,SAASC,kBAAT,QAAmC,cAAnC;;AAEA,MAAMC,GAAG,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAAwC;AAClD,QAAMC,OAAO,gBACX;AAAA,4BACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,cAAD;AAAgB,MAAA,KAAK,EAAEN,KAAvB;AAAA,6BACE,QAAC,SAAD,oBAAeK,SAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;;AASA,SAAOC,OAAP;AACD,CAXD;;AAaAH,GAAG,CAACI,eAAJ,GAAsB,MAAOC,UAAP,IAAsB;AAC1C,QAAMC,QAAQ,GAAG,MAAMV,OAAO,CAACQ,eAAR,CAAwBC,UAAxB,CAAvB;AACA,2BAAYC,QAAZ;AACD,CAHD;;AAKA,eAAeP,kBAAkB,CAACC,GAAD,CAAjC","sourcesContent":["import React from \"react\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport NextApp, { AppProps } from \"next/app\";\nimport \"../styles/globals.css\";\nimport theme from \"../theme\";\nimport AppHead from \"~components/AppHead\";\nimport { appWithTranslation } from \"next-i18next\";\n\nconst App = ({ Component, pageProps }: AppProps) => {\n  const content = (\n    <>\n      <AppHead />\n      <ChakraProvider theme={theme}>\n        <Component {...pageProps} />\n      </ChakraProvider>\n    </>\n  );\n\n  return content;\n};\n\nApp.getInitialProps = async (appContext) => {\n  const appProps = await NextApp.getInitialProps(appContext);\n  return { ...appProps };\n};\n\nexport default appWithTranslation(App);\n"]},"metadata":{},"sourceType":"module"}